// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects   Project[]       @relation("ProjectOwner")
  projectAccess   ProjectAccess[]
  createdAnalyses Analyses[]      @relation("AnalysisCreator")

  @@map("users")
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner   User @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int

  accesses ProjectAccess[]
  analyses Analyses[]

  @@map("projects")
}

model ProjectAccess {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@unique([userId, projectId])
  @@map("project_accesses")
}

model Analyses {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  creator   User @relation("AnalysisCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId Int

  @@map("analyses")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}
